!function(n){var t={};function e(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return n[o].call(r.exports,r,r.exports,e),r.l=!0,r.exports}e.m=n,e.c=t,e.d=function(n,t,o){e.o(n,t)||Object.defineProperty(n,t,{enumerable:!0,get:o})},e.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},e.t=function(n,t){if(1&t&&(n=e(n)),8&t)return n;if(4&t&&"object"==typeof n&&n&&n.__esModule)return n;var o=Object.create(null);if(e.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:n}),2&t&&"string"!=typeof n)for(var r in n)e.d(o,r,function(t){return n[t]}.bind(null,r));return o},e.n=function(n){var t=n&&n.__esModule?function(){return n.default}:function(){return n};return e.d(t,"a",t),t},e.o=function(n,t){return Object.prototype.hasOwnProperty.call(n,t)},e.p="",e(e.s=13)}([function(n,t){n.exports=function(n){var t=[];return t.toString=function(){return this.map(function(t){var e=function(n,t){var e=n[1]||"",o=n[3];if(!o)return e;if(t&&"function"==typeof btoa){var r=function(n){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(n))))+" */"}(o),i=o.sources.map(function(n){return"/*# sourceURL="+o.sourceRoot+n+" */"});return[e].concat(i).concat([r]).join("\n")}return[e].join("\n")}(t,n);return t[2]?"@media "+t[2]+"{"+e+"}":e}).join("")},t.i=function(n,e){"string"==typeof n&&(n=[[null,n,""]]);for(var o={},r=0;r<this.length;r++){var i=this[r][0];"number"==typeof i&&(o[i]=!0)}for(r=0;r<n.length;r++){var c=n[r];"number"==typeof c[0]&&o[c[0]]||(e&&!c[2]?c[2]=e:e&&(c[2]="("+c[2]+") and ("+e+")"),t.push(c))}},t}},function(n,t,e){var o={},r=function(n){var t;return function(){return void 0===t&&(t=n.apply(this,arguments)),t}}(function(){return window&&document&&document.all&&!window.atob}),i=function(n){var t={};return function(n,e){if("function"==typeof n)return n();if(void 0===t[n]){var o=function(n,t){return t?t.querySelector(n):document.querySelector(n)}.call(this,n,e);if(window.HTMLIFrameElement&&o instanceof window.HTMLIFrameElement)try{o=o.contentDocument.head}catch(n){o=null}t[n]=o}return t[n]}}(),c=null,s=0,a=[],u=e(8);function f(n,t){for(var e=0;e<n.length;e++){var r=n[e],i=o[r.id];if(i){i.refs++;for(var c=0;c<i.parts.length;c++)i.parts[c](r.parts[c]);for(;c<r.parts.length;c++)i.parts.push(b(r.parts[c],t))}else{var s=[];for(c=0;c<r.parts.length;c++)s.push(b(r.parts[c],t));o[r.id]={id:r.id,refs:1,parts:s}}}}function l(n,t){for(var e=[],o={},r=0;r<n.length;r++){var i=n[r],c=t.base?i[0]+t.base:i[0],s={css:i[1],media:i[2],sourceMap:i[3]};o[c]?o[c].parts.push(s):e.push(o[c]={id:c,parts:[s]})}return e}function p(n,t){var e=i(n.insertInto);if(!e)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var o=a[a.length-1];if("top"===n.insertAt)o?o.nextSibling?e.insertBefore(t,o.nextSibling):e.appendChild(t):e.insertBefore(t,e.firstChild),a.push(t);else if("bottom"===n.insertAt)e.appendChild(t);else{if("object"!=typeof n.insertAt||!n.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var r=i(n.insertAt.before,e);e.insertBefore(t,r)}}function y(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n);var t=a.indexOf(n);t>=0&&a.splice(t,1)}function m(n){var t=document.createElement("style");if(void 0===n.attrs.type&&(n.attrs.type="text/css"),void 0===n.attrs.nonce){var o=function(){0;return e.nc}();o&&(n.attrs.nonce=o)}return d(t,n.attrs),p(n,t),t}function d(n,t){Object.keys(t).forEach(function(e){n.setAttribute(e,t[e])})}function b(n,t){var e,o,r,i;if(t.transform&&n.css){if(!(i="function"==typeof t.transform?t.transform(n.css):t.transform.default(n.css)))return function(){};n.css=i}if(t.singleton){var a=s++;e=c||(c=m(t)),o=v.bind(null,e,a,!1),r=v.bind(null,e,a,!0)}else n.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(e=function(n){var t=document.createElement("link");return void 0===n.attrs.type&&(n.attrs.type="text/css"),n.attrs.rel="stylesheet",d(t,n.attrs),p(n,t),t}(t),o=function(n,t,e){var o=e.css,r=e.sourceMap,i=void 0===t.convertToAbsoluteUrls&&r;(t.convertToAbsoluteUrls||i)&&(o=u(o));r&&(o+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */");var c=new Blob([o],{type:"text/css"}),s=n.href;n.href=URL.createObjectURL(c),s&&URL.revokeObjectURL(s)}.bind(null,e,t),r=function(){y(e),e.href&&URL.revokeObjectURL(e.href)}):(e=m(t),o=function(n,t){var e=t.css,o=t.media;o&&n.setAttribute("media",o);if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}.bind(null,e),r=function(){y(e)});return o(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap)return;o(n=t)}else r()}}n.exports=function(n,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=r()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var e=l(n,t);return f(e,t),function(n){for(var r=[],i=0;i<e.length;i++){var c=e[i];(s=o[c.id]).refs--,r.push(s)}n&&f(l(n,t),t);for(i=0;i<r.length;i++){var s;if(0===(s=r[i]).refs){for(var a=0;a<s.parts.length;a++)s.parts[a]();delete o[s.id]}}}};var h=function(){var n=[];return function(t,e){return n[t]=e,n.filter(Boolean).join("\n")}}();function v(n,t,e,o){var r=e?"":o.css;if(n.styleSheet)n.styleSheet.cssText=h(t,r);else{var i=document.createTextNode(r),c=n.childNodes;c[t]&&n.removeChild(c[t]),c.length?n.insertBefore(i,c[t]):n.appendChild(i)}}},function(n,t,e){var o=e(7);"string"==typeof o&&(o=[[n.i,o,""]]);var r={sourceMap:!0,hmr:!0,transform:void 0,insertInto:void 0};e(1)(o,r);o.locals&&(n.exports=o.locals)},function(n,t,e){var o=e(9);"string"==typeof o&&(o=[[n.i,o,""]]);var r={sourceMap:!0,hmr:!0,transform:void 0,insertInto:void 0};e(1)(o,r);o.locals&&(n.exports=o.locals)},function(n,t,e){var o=e(10);"string"==typeof o&&(o=[[n.i,o,""]]);var r={sourceMap:!0,hmr:!0,transform:void 0,insertInto:void 0};e(1)(o,r);o.locals&&(n.exports=o.locals)},function(n,t,e){var o=e(11);"string"==typeof o&&(o=[[n.i,o,""]]);var r={sourceMap:!0,hmr:!0,transform:void 0,insertInto:void 0};e(1)(o,r);o.locals&&(n.exports=o.locals)},function(n,t,e){var o=e(12);"string"==typeof o&&(o=[[n.i,o,""]]);var r={sourceMap:!0,hmr:!0,transform:void 0,insertInto:void 0};e(1)(o,r);o.locals&&(n.exports=o.locals)},function(n,t,e){(n.exports=e(0)(!0)).push([n.i,"nav {\n  display: flex;\n  justify-content: space-around;\n  font-size: 80px;\n  margin: 60px;\n}\n  nav a {\n    text-decoration: none;\n  }\n","",{version:3,sources:["/Users/davidchhing/Documents/School/Full Stack/week-6/layout-components/src/components/Header.css"],names:[],mappings:"AAAA;EACE,cAAc;EACd,8BAA8B;EAC9B,gBAAgB;EAChB,aAAa;CAId;EAHC;IACE,sBAAsB;GACvB",file:"Header.css",sourcesContent:["nav {\n  display: flex;\n  justify-content: space-around;\n  font-size: 80px;\n  margin: 60px;\n  a {\n    text-decoration: none;\n  }\n}\n"],sourceRoot:""}])},function(n,t){n.exports=function(n){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!n||"string"!=typeof n)return n;var e=t.protocol+"//"+t.host,o=e+t.pathname.replace(/\/[^\/]*$/,"/");return n.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(n,t){var r,i=t.trim().replace(/^"(.*)"$/,function(n,t){return t}).replace(/^'(.*)'$/,function(n,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?n:(r=0===i.indexOf("//")?i:0===i.indexOf("/")?e+i:o+i.replace(/^\.\//,""),"url("+JSON.stringify(r)+")")})}},function(n,t,e){(t=n.exports=e(0)(!0)).push([n.i,"body {\n  background-color: salmon;\n}\n\n._1eA2zVFjcA8opQdQR7PxjK {\n  font-family: sans-serif;\n  font-size: 30px;\n  text-align: center;\n}\n","",{version:3,sources:["/Users/davidchhing/Documents/School/Full Stack/week-6/layout-components/src/components/App.css"],names:[],mappings:"AAAA;EACE,yBAAyB;CAC1B;;AAED;EACE,wBAAwB;EACxB,gBAAgB;EAChB,mBAAmB;CACpB",file:"App.css",sourcesContent:["body {\n  background-color: salmon;\n}\n\n.main {\n  font-family: sans-serif;\n  font-size: 30px;\n  text-align: center;\n}\n"],sourceRoot:""}]),t.locals={main:"_1eA2zVFjcA8opQdQR7PxjK"}},function(n,t,e){(t=n.exports=e(0)(!0)).push([n.i,'p {\n  font-size: 30px;\n  text-align: center;\n  min-height: 100%;\n  font-family: "Helvetica Neue", Arial, sans-serif;\n  position: relative;\n  margin: 30px;\n}\nh3, h4 {\n  text-align: center;\n  font-size: 60px;\n}\n#_3AP_jjMmPSG9VcKwLzUWyo {\n  display: flex;\n  justify-content: space-evenly;\n}\n',"",{version:3,sources:["/Users/davidchhing/Documents/School/Full Stack/week-6/layout-components/src/components/Projects.css"],names:[],mappings:"AAAA;EACE,gBAAgB;EAChB,mBAAmB;EACnB,iBAAiB;EACjB,iDAAiD;EACjD,mBAAmB;EACnB,aAAa;CACd;AACD;EACE,mBAAmB;EACnB,gBAAgB;CACjB;AACD;EACE,cAAc;EACd,8BAA8B;CAC/B",file:"Projects.css",sourcesContent:['p {\n  font-size: 30px;\n  text-align: center;\n  min-height: 100%;\n  font-family: "Helvetica Neue", Arial, sans-serif;\n  position: relative;\n  margin: 30px;\n}\nh3, h4 {\n  text-align: center;\n  font-size: 60px;\n}\n#projects {\n  display: flex;\n  justify-content: space-evenly;\n}\n'],sourceRoot:""}]),t.locals={projects:"_3AP_jjMmPSG9VcKwLzUWyo"}},function(n,t,e){(t=n.exports=e(0)(!0)).push([n.i,"#akbvy2PLRNdA4u2_T-oz0 {\n  display: flex;\n}\n","",{version:3,sources:["/Users/davidchhing/Documents/School/Full Stack/week-6/layout-components/src/components/Services.css"],names:[],mappings:"AAAA;EACE,cAAc;CACf",file:"Services.css",sourcesContent:["#services {\n  display: flex;\n}\n"],sourceRoot:""}]),t.locals={services:"akbvy2PLRNdA4u2_T-oz0"}},function(n,t,e){(n.exports=e(0)(!0)).push([n.i,"footer {\n  font-size: 55px;\n  text-align: center;\n  color: green;\n  position: absolute;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  padding: 1rem;\n  background-color: white;\n  text-align: center;\n}\n","",{version:3,sources:["/Users/davidchhing/Documents/School/Full Stack/week-6/layout-components/src/components/Footer.css"],names:[],mappings:"AAAA;EACE,gBAAgB;EAChB,mBAAmB;EACnB,aAAa;EACb,mBAAmB;EACnB,SAAS;EACT,UAAU;EACV,QAAQ;EACR,cAAc;EACd,wBAAwB;EACxB,mBAAmB;CACpB",file:"Footer.css",sourcesContent:["footer {\n  font-size: 55px;\n  text-align: center;\n  color: green;\n  position: absolute;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  padding: 1rem;\n  background-color: white;\n  text-align: center;\n}\n"],sourceRoot:""}])},function(n,t,e){"use strict";function o(n,t){for(var e=0;e<t.length;e++){var o=t[e];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(n,o.key,o)}}e.r(t);var r=function(){function n(t){!function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),this.props=t||{}}return function(n,t,e){t&&o(n.prototype,t),e&&o(n,e)}(n,[{key:"attach",value:function(n){n.innerHTML=this.render()}},{key:"render",value:function(){throw Error("The component should render HTML")}}]),n}(),i=e(2),c=e.n(i);function s(n){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n})(n)}function a(n,t){for(var e=0;e<t.length;e++){var o=t[e];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(n,o.key,o)}}function u(n,t){return!t||"object"!==s(t)&&"function"!=typeof t?function(n){if(void 0===n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return n}(n):t}function f(n){return(f=Object.setPrototypeOf?Object.getPrototypeOf:function(n){return n.__proto__||Object.getPrototypeOf(n)})(n)}function l(n,t){return(l=Object.setPrototypeOf||function(n,t){return n.__proto__=t,n})(n,t)}var p=function(n){function t(){return function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),u(this,f(t).apply(this,arguments))}return function(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");n.prototype=Object.create(t&&t.prototype,{constructor:{value:n,writable:!0,configurable:!0}}),t&&l(n,t)}(t,r),function(n,t,e){t&&a(n.prototype,t),e&&a(n,e)}(t,[{key:"render",value:function(){var n=this.props.links.map(function(n){return'<a href="/'.concat(n,'">').concat(n,"</a>")});return'\n      <header class="'.concat(c.a.header,'">\n        <nav>\n          ').concat(n.join(" "),"\n        </nav>\n      </header>\n          ")}}]),t}(),y=e(3),m=e.n(y),d=e(4),b=e.n(d);function h(n){return(h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n})(n)}function v(n,t){for(var e=0;e<t.length;e++){var o=t[e];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(n,o.key,o)}}function A(n,t){return!t||"object"!==h(t)&&"function"!=typeof t?function(n){if(void 0===n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return n}(n):t}function g(n){return(g=Object.setPrototypeOf?Object.getPrototypeOf:function(n){return n.__proto__||Object.getPrototypeOf(n)})(n)}function j(n,t){return(j=Object.setPrototypeOf||function(n,t){return n.__proto__=t,n})(n,t)}var w=function(n){function t(){return function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),A(this,g(t).apply(this,arguments))}return function(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");n.prototype=Object.create(t&&t.prototype,{constructor:{value:n,writable:!0,configurable:!0}}),t&&j(n,t)}(t,r),function(n,t,e){t&&v(n.prototype,t),e&&v(n,e)}(t,[{key:"render",value:function(){var n='<h3>Projects</h3>\n\n    <div id="projects"><h4>'.concat(this.props.project1,"</h4>\n    <p>Lorem ipsum dolor sit, amet consectetur adipisicing elit. Voluptatibus quasi consequuntur veniam, eaque numquam sint tenetur velit in, voluptas quisquam eos! Possimus adipisci natus obcaecati inventore quaerat facilis enim similique</p>\n    <h4>").concat(this.props.project2,"</h4>\n    <p>Lorem ipsum dolor sit, amet consectetur adipisicing elit. Voluptatibus quasi consequuntur veniam, eaque numquam sint tenetur velit in, voluptas quisquam eos! Possimus adipisci natus obcaecati inventore quaerat facilis enim similique</p>\n    <h4>").concat(this.props.project3,"</h4>\n    <p>Lorem ipsum dolor sit, amet consectetur adipisicing elit. Voluptatibus quasi consequuntur veniam, eaque numquam sint tenetur velit in, voluptas quisquam eos! Possimus adipisci natus obcaecati inventore quaerat facilis enim similique</p></div>\n    ");return'<section class="'.concat(b.a.projectSection,'">\n      ').concat(n,"\n    </section>")}}]),t}(),C=e(5),x=e.n(C);function O(n){return(O="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n})(n)}function E(n,t){for(var e=0;e<t.length;e++){var o=t[e];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(n,o.key,o)}}function S(n,t){return!t||"object"!==O(t)&&"function"!=typeof t?function(n){if(void 0===n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return n}(n):t}function B(n){return(B=Object.setPrototypeOf?Object.getPrototypeOf:function(n){return n.__proto__||Object.getPrototypeOf(n)})(n)}function _(n,t){return(_=Object.setPrototypeOf||function(n,t){return n.__proto__=t,n})(n,t)}var P=function(n){function t(){return function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),S(this,B(t).apply(this,arguments))}return function(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");n.prototype=Object.create(t&&t.prototype,{constructor:{value:n,writable:!0,configurable:!0}}),t&&_(n,t)}(t,r),function(n,t,e){t&&E(n.prototype,t),e&&E(n,e)}(t,[{key:"render",value:function(){var n='\n    <div id="services">\n    <h3>Services</h3>\n    <p>'.concat(this.props.service,"</p> </div>");return'<section class="'.concat(x.a.services,'">\n      ').concat(n,"\n    </section>")}}]),t}(),k=e(6),q=e.n(k);function R(n){return(R="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n})(n)}function U(n,t){for(var e=0;e<t.length;e++){var o=t[e];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(n,o.key,o)}}function T(n,t){return!t||"object"!==R(t)&&"function"!=typeof t?function(n){if(void 0===n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return n}(n):t}function L(n){return(L=Object.setPrototypeOf?Object.getPrototypeOf:function(n){return n.__proto__||Object.getPrototypeOf(n)})(n)}function M(n,t){return(M=Object.setPrototypeOf||function(n,t){return n.__proto__=t,n})(n,t)}var D=function(n){function t(){return function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),T(this,L(t).apply(this,arguments))}return function(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");n.prototype=Object.create(t&&t.prototype,{constructor:{value:n,writable:!0,configurable:!0}}),t&&M(n,t)}(t,r),function(n,t,e){t&&U(n.prototype,t),e&&U(n,e)}(t,[{key:"render",value:function(){var n="".concat(this.props.footerContent,"\n    <h3>Stuff About Me</h3>\n    <p>Lorem ipsum dolor sit, amet consectetur adipisicing elit. Voluptatibus quasi consequuntur veniam, eaque numquam sint tenetur velit in, voluptas quisquam eos! Possimus adipisci natus obcaecati inventore quaerat facilis enim similique</p>");return'<footer class="'.concat(q.a.footer,'">\n      ').concat(n,"\n    </footer>")}}]),t}();function I(n){return(I="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n})(n)}function z(n,t){for(var e=0;e<t.length;e++){var o=t[e];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(n,o.key,o)}}function F(n,t){return!t||"object"!==I(t)&&"function"!=typeof t?function(n){if(void 0===n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return n}(n):t}function N(n){return(N=Object.setPrototypeOf?Object.getPrototypeOf:function(n){return n.__proto__||Object.getPrototypeOf(n)})(n)}function H(n,t){return(H=Object.setPrototypeOf||function(n,t){return n.__proto__=t,n})(n,t)}new(function(n){function t(){return function(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),F(this,N(t).apply(this,arguments))}return function(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");n.prototype=Object.create(t&&t.prototype,{constructor:{value:n,writable:!0,configurable:!0}}),t&&H(n,t)}(t,r),function(n,t,e){t&&z(n.prototype,t),e&&z(n,e)}(t,[{key:"render",value:function(){var n=new p({links:["about","contact","projects","services"]}),t=new D({footerContent:"Footer area"}),e=new w({project1:"Dog match",project2:"Salmon Cookies",project3:"Day planner"}),o=new P({service:["Design","Programming","Freelancing"]});return"\n      ".concat(n.render(),'\n      <h1 class="').concat(m.a.main,'">').concat(this.props.message,"</h1>\n      ").concat(e.render(),"\n      ").concat(o.render(),"\n      ").concat(t.render(),"\n      ")}}]),t}())({message:"hi there this is working"}).attach(document.getElementById("root"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,